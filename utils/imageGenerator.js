import sharp from 'sharp';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

class ImageGenerator {
  constructor() {
    this.cacheDir = path.join(__dirname, '../cache');
    this.imagePath = path.join(this.cacheDir, 'summary.png');
  }

  async ensureCacheDir() {
    try {
      await fs.access(this.cacheDir);
    } catch {
      await fs.mkdir(this.cacheDir, { recursive: true });
    }
  }

  // Escape XML special characters
  escapeXml(unsafe) {
    if (!unsafe) return '';
    return unsafe.toString()
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&apos;');
  }

  async generateSummaryImage(totalCountries, topCountries, refreshTimestamp) {
    await this.ensureCacheDir();

    const width = 800;
    const height = 600;
    
    // Escape all dynamic content
    const escapedTotalCountries = this.escapeXml(totalCountries);
    const escapedTimestamp = this.escapeXml(refreshTimestamp.toISOString());
    
    // Create SVG content with properly escaped text
    const svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title { font: bold 32px Arial, sans-serif; fill: #2c3e50; }
      .subtitle { font: 24px Arial, sans-serif; fill: #2c3e50; }
      .timestamp { font: 16px Arial, sans-serif; fill: #7f8c8d; }
      .country-name { font: 16px Arial, sans-serif; fill: #2c3e50; }
      .gdp { font: 16px Arial, sans-serif; fill: #27ae60; }
      .population { font: 12px Arial, sans-serif; fill: #7f8c8d; }
      .footer { font: 12px Arial, sans-serif; fill: #95a5a6; }
    </style>
  </defs>
  
  <!-- Background -->
  <rect width="100%" height="100%" fill="#f8f9fa"/>
  
  <!-- Title -->
  <text x="400" y="60" text-anchor="middle" class="title">Countries Summary</text>
  <text x="400" y="120" text-anchor="middle" class="subtitle">Total Countries: ${escapedTotalCountries}</text>
  <text x="400" y="160" text-anchor="middle" class="timestamp">Last Refreshed: ${escapedTimestamp}</text>
  
  <!-- Top Countries Section -->
  <text x="50" y="220" class="subtitle">Top 5 Countries by Estimated GDP:</text>
  
  ${topCountries.map((country, index) => {
    const escapedName = this.escapeXml(country.name);
    const escapedGDP = this.escapeXml(
      country.estimated_gdp?.toLocaleString(undefined, { maximumFractionDigits: 2 }) || 'N/A'
    );
    const escapedPopulation = this.escapeXml(
      country.population?.toLocaleString() || 'N/A'
    );
    const yPos = 260 + (index * 60);
    
    return `
      <text x="70" y="${yPos}" class="country-name">${index + 1}. ${escapedName}</text>
      <text x="70" y="${yPos + 25}" class="gdp">GDP: $${escapedGDP}</text>
      <text x="70" y="${yPos + 45}" class="population">Population: ${escapedPopulation}</text>
    `;
  }).join('')}
  
  <!-- Footer -->
  <text x="400" y="580" text-anchor="middle" class="footer">Generated by Country Currency &amp; Exchange API</text>
</svg>`;

    try {
      // Convert SVG to PNG using Sharp
      await sharp(Buffer.from(svgContent))
        .png()
        .toFile(this.imagePath);

      console.log('✅ Summary image generated successfully');
      return this.imagePath;
    } catch (error) {
      console.error('❌ SVG to PNG conversion failed:', error.message);
      // Fallback to text file
      return await this.createFallbackTextFile(totalCountries, topCountries, refreshTimestamp);
    }
  }

  async createFallbackTextFile(totalCountries, topCountries, refreshTimestamp) {
    const textPath = this.imagePath.replace('.png', '.txt');
    
    let textContent = `
╔══════════════════════════════════════════════════════════════════════════╗
║                         COUNTRIES SUMMARY                               ║
╠══════════════════════════════════════════════════════════════════════════╣
║ Total Countries: ${totalCountries.toString().padEnd(45)} ║
║ Last Refreshed: ${refreshTimestamp.toISOString().padEnd(43)} ║
╠══════════════════════════════════════════════════════════════════════════╣
║                    TOP 5 COUNTRIES BY ESTIMATED GDP                     ║
╠══════════════════════════════════════════════════════════════════════════╣
`;

    topCountries.forEach((country, index) => {
      const gdpFormatted = country.estimated_gdp?.toLocaleString(undefined, { 
        maximumFractionDigits: 2 
      }) || 'N/A';
      
      const populationFormatted = country.population?.toLocaleString() || 'N/A';
      
      textContent += `║ ${(index + 1).toString().padEnd(2)}. ${country.name.padEnd(30)} `;
      textContent += `GDP: $${gdpFormatted.padEnd(20)} ║\n`;
      textContent += `║     Population: ${populationFormatted.padEnd(52)} ║\n`;
      
      if (index < topCountries.length - 1) {
        textContent += `║${''.padEnd(70)}║\n`;
      }
    });

    textContent += `╠══════════════════════════════════════════════════════════════════════════╣
║              Generated by Country Currency & Exchange API              ║
╚══════════════════════════════════════════════════════════════════════════╝
`;

    await fs.writeFile(textPath, textContent);
    console.log('✅ Fallback text file created');
    return textPath;
  }

  async imageExists() {
    try {
      await fs.access(this.imagePath);
      return true;
    } catch {
      // Also check for text fallback
      const textPath = this.imagePath.replace('.png', '.txt');
      try {
        await fs.access(textPath);
        this.imagePath = textPath;
        return true;
      } catch {
        return false;
      }
    }
  }
}

export default new ImageGenerator();
